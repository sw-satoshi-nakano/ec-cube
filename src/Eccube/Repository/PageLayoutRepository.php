<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Eccube\Entity\PageLayout;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * PageLayoutRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageLayoutRepository extends AbstractRepository
{
<<<<<<< HEAD
    protected $app;

    public function setApplication($app)
    {
        $this->app = $app;
    }

    public function findUnusedBlocks(DeviceType $DeviceType, $pageId)
    {
        $em = $this
            ->getEntityManager();
        $blockRepo = $em->getRepository('Eccube\Entity\Block');
        $ownBlockPositions = $this->get($DeviceType, $pageId)->getBlockPositions();
        $ids = array();
        foreach ($ownBlockPositions as $ownBlockPosition) {
            $ids[] = $ownBlockPosition->getBlock()->getId();
        }

        # $idsが空配列だと、$ids以外のblockを取得するSQLが生成されないため、存在しないidを入れる
        if (empty($ids)) {
            $ids[] = \Eccube\Entity\Block::UNUSED_BLOCK_ID;
        }

        return $blockRepo->createQueryBuilder('b')
            ->where('b.id not in (:ids)')
            ->setParameter(':ids', $ids)
            ->getQuery()
            ->getResult();
    }

    public function get(DeviceType $DeviceType, $pageId)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND p.id = :pageId')
            ->addOrderBy('bp.target_id', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $ownResult = $qb
            ->getQuery()
            ->setParameters(array(
                'DeviceType'  => $DeviceType,
                'pageId'        => $pageId,
            ))
            ->getSingleResult();

        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND bp.anywhere = 1')
            ->addOrderBy('bp.target_id', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $anyResults = $qb
            ->getQuery()
            ->setParameters(array(
                'DeviceType' => $DeviceType,
            ))
            ->getResult();

        $OwnBlockPosition = $ownResult->getBlockPositions();
        foreach ($anyResults as $anyResult) {
            $BlockPositions = $anyResult->getBlockPositions();
            foreach ($BlockPositions as $BlockPosition) {
                if (!$OwnBlockPosition->contains($BlockPosition)) {
                    $ownResult->addBlockPosition($BlockPosition);
                }
            }
        }

        return $ownResult;

    }

    public function getByUrl(DeviceType $DeviceType, $url, $page = null)
    {
        $options = $this->app['config']['doctrine_cache'];
        $lifetime = $options['result_cache']['lifetime'];

        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND p.url = :url')
            ->addOrderBy('bp.target_id', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $ownResult = $qb
            ->getQuery()
            ->useResultCache(true, $lifetime)
            ->setParameters(array(
                'DeviceType' => $DeviceType,
                'url'  => $url,
            ))
            ->getSingleResult();

        if(count($ownResult->getBlockPositions()) && ($url == 'preview') && ($page == 'homepage')) {
            return $ownResult;
        }

        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND bp.anywhere = 1')
            ->addOrderBy('bp.target_id', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $anyResults = $qb
            ->getQuery()
            ->useResultCache(true, $lifetime)
            ->setParameters(array(
                'DeviceType' => $DeviceType,
            ))
            ->getResult();

        $OwnBlockPosition = $ownResult->getBlockPositions();
        $OwnBlockPositionIds = array();
        foreach ($OwnBlockPosition as $BlockPosition) {
            $OwnBlockPositionIds[] =  $BlockPosition->getBlockId();
        }

        foreach ($anyResults as $anyResult) {
            $BlockPositions = $anyResult->getBlockPositions();
            foreach ($BlockPositions as $BlockPosition) {
                if (!in_array($BlockPosition->getBlockId(), $OwnBlockPositionIds)) {
                    $ownResult->addBlockPosition($BlockPosition);
                    $OwnBlockPositionIds[] = $BlockPosition->getBlockId();
                }
            }
        }

        return $ownResult;
    }

    public function newPageLayout(DeviceType $DeviceType)
    {
        $PageLayout = new \Eccube\Entity\PageLayout();
        $PageLayout
            ->setDeviceType($DeviceType)
            ->setEditFlg(PageLayout::EDIT_FLG_USER);

        return $PageLayout;
    }

    public function findOrCreate($page_id, DeviceType $DeviceType)
    {
        if (is_null($page_id)) {
            $PageLayout = $this
                ->newPageLayout($DeviceType);
            return $PageLayout;
        } else {
            return $this->get($DeviceType, $page_id);
        }
    }

=======
>>>>>>> 2c09ba75d7b7fba1a3b27dbc46b98417f7fffe0d
    /**
     * PageLayoutRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, PageLayout::class);
    }
}
